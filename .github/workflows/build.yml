name: Build
on:
  push:
    branches:
      - dev
      - main
      - master
  pull_request:
    branches:
      - main
      - dev
      - master

jobs:
   runaction:
      runs-on: ubuntu-latest 
      env:
        DOCKER_REPOSITORY: sapnamanokar # name of Docker Hub ID
        IMAGE_NAME: webapp
        IMAGE_TAG: ${{ github.run_number }}
      steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}

      - name: Use Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build
      - name: Test and coverage
        run: npm run test
      - name: Log in to Docker Hub
       # if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: sapnamanokar/webapp
          tags: |
            type=ref,event=tag
           # type=raw,value=latest,enable={{is_default_branch}}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: 'docker.io/${{$DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'MEDIUM,HIGH,CRITICAL'
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          #push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
